using PTAData.Entities;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.IO;
using System.Linq;
using System.Linq.Expressions;
using System.Web;

namespace HickoryPTAApp.Models
{
    public class ServerFileRepository : BaseRepository, IServerFileRepository
    {
        HickoryPTAAppContext context = new HickoryPTAAppContext();

        public IQueryable<ServerFile> All
        {
            get { return context.ServerFiles; }
        }

        public IQueryable<ServerFile> AllIncluding(params Expression<Func<ServerFile, object>>[] includeProperties)
        {
            IQueryable<ServerFile> query = context.ServerFiles;
            foreach (var includeProperty in includeProperties)
            {
                query = query.Include(includeProperty);
            }
            return query;
        }

        public ServerFile Find(int id)
        {
            var serverFile = context.ServerFiles.Find(id);
            return serverFile;
        }

        public void InsertOrUpdate(ServerFile serverFile, string currentUser)
        {
            if (serverFile.FileId == default(int))
            {
                // New entity
                UpdateAutoGeneratedFields(serverFile, currentUser, true);
                context.ServerFiles.Add(serverFile);

                string folderName = String.Empty;

                if (serverFile is CommitteeFile)
                {
                    var committeeFile = serverFile as CommitteeFile;
                    folderName = Path.Combine("CommitteeFiles", committeeFile.CommitteeId.ToString());
                }
                else if (serverFile is PostFile)
                {
                    var postFile = serverFile as PostFile;
                    folderName = Path.Combine("PostFiles", postFile.PostId.ToString());
                }

                serverFile.FileName = serverFile.PostedFile.FileName;
                serverFile.Path = Path.Combine(
                    "~/Content/files/",
                    folderName,
                    serverFile.FileName);

                var serverpath = HttpContext.Current.Server.MapPath(serverFile.Path);
                if (!Directory.Exists(Path.GetDirectoryName(serverpath)))
                {
                    Directory.CreateDirectory(Path.GetDirectoryName(serverpath));
                }

                serverFile.PostedFile.SaveAs(serverpath);
            }
            else
            {
                // We have no reason to update a server file record.
                // Existing entity
                //serverFile.LastModified = DateTime.Now;

                //UpdateAutoGeneratedFields(serverFile, currentUser, false);
                //context.Entry(serverFile).State = System.Data.Entity.EntityState.Modified;
            }
        }

        public void Delete(int id)
        {
            var serverFile = context.ServerFiles.Find(id);
            File.Delete(serverFile.Path);
            context.ServerFiles.Remove(serverFile);
        }

        public void Save()
        {
            context.SaveChanges();
        }

        public void Dispose()
        {
            context.Dispose();
        }
    }

    public interface IServerFileRepository : IDisposable
    {
        IQueryable<ServerFile> All { get; }
        IQueryable<ServerFile> AllIncluding(params Expression<Func<ServerFile, object>>[] includeProperties);
        ServerFile Find(int id);
        void InsertOrUpdate(ServerFile serverFile, string currentUser);
        void Delete(int id);
        void Save();
    }
}